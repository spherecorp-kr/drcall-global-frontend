name: Build and Push Docker Images

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
      - 'v*-stg'

env:
  AWS_REGION: ap-southeast-1  # 기본 리전 (PROD/STG)

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    strategy:
      matrix:
        service:
          - patient-service
          - hospital-service
          - appointment-service
          - payment-service
          - shipping-service
          - messaging-service
          - translation-service
          - video-call-service
          - storage-service
          - admin-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine environment
        id: env
        run: |
          if [[ $GITHUB_REF == refs/tags/*-stg ]]; then
            echo "environment=stg" >> $GITHUB_OUTPUT
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "tag=main-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/${{ matrix.service }}
          file: ./backend/${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ steps.env.outputs.environment }}/${{ matrix.service }}:${{ steps.env.outputs.tag }}
            ${{ steps.login-ecr.outputs.registry }}/${{ steps.env.outputs.environment }}/${{ matrix.service }}:latest
          cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ steps.env.outputs.environment }}/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ steps.env.outputs.environment }}/${{ matrix.service }}:buildcache,mode=max
          platforms: linux/amd64

      - name: Image digest
        run: echo "Image pushed with digest ${{ steps.docker_build.outputs.digest }}"

  notify-success:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Notify Slack
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST $SLACK_WEBHOOK_URL -H 'Content-Type: application/json' -d '{
            "text": "✅ Docker images built and pushed successfully!",
            "attachments": [{
              "color": "good",
              "fields": [
                {"title": "Ref", "value": "${{ github.ref }}", "short": true},
                {"title": "Commit", "value": "${{ github.sha }}", "short": true}
              ]
            }]
          }'

  notify-failure:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Notify Slack
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST $SLACK_WEBHOOK_URL -H 'Content-Type: application/json' -d '{
            "text": "❌ Docker image build failed!",
            "attachments": [{
              "color": "danger",
              "fields": [
                {"title": "Ref", "value": "${{ github.ref }}", "short": true},
                {"title": "Commit", "value": "${{ github.sha }}", "short": true}
              ]
            }]
          }'
